var r="background: #6a4313;color: white;font-size:10px;font-family: monospace;border:1px solid #6a4313;border-radius: 5px",n="%c üê¶Error from Spurv: ",e=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return function(t){return e.reduce((function(e,t){"function"==typeof t&&1===t.length||console.log(n,r,"compose accepts pure function(s) which needs only 1 argument");try{return t(e)}catch(e){console.log(n,r,e)}}),t)}},t=function(e){if(null===e)return null;var t=function(r){var n=Object.create(null);return Object.assign(n,{val:r,left:null,right:null})},l=function(r){return"null"===r||void 0===r?null:t(Number(r))},u=[];try{var o=e.slice(1,-1).split(","),a=o.shift();if("null"===a)return null;var i=t(Number(a));for(u.push(i);u.length;)for(var f=u.length,s=0;s<f;s++){var c=u.shift();if(c){var v=l(o.shift()),g=l(o.shift());c.left=v,c.right=g,null!==v&&u.push(v),null!==g&&u.push(g)}}return i}catch(e){console.log(n,r,"make sure you provided a valid serialized string to function deserialize"),console.log(e)}},l=function(e,t){void 0===t&&(t={levels:Number.POSITIVE_INFINITY});var u=t.levels?Number(t.levels):0;return Array.isArray(e)?0===u?e:e.reduce((function(r,n){return Array.isArray(n)?r.concat(l(n,{levels:u-1})):r.concat(n)}),[]):(console.log(n,r,"flatten accepts an array","and safe answer '[]' returned"),[])},u=function(e){if(null===e)return null;var t=[],l=[];l.push(e);try{for(;l.length;)for(var u=l.length,o=0;o<u;o++){var a=l.shift();null!==a?(t.push(a.val),l.push(a.left),l.push(a.right)):t.push("null")}for(;"null"===t[t.length-1];)t.pop();return"["+t.toString()+"]"}catch(e){console.log(n,r,"make sure you pass a binary tree to function serialize"),console.log(e)}},o=function(e){if(isNaN(e)||e<0||e>170)return console.log(n,r,"number 'n'(0 <= n <= 170) expected","and safe answer '1' returned"),1;if(0===e)return 1;if(e<=99){for(var t=1,l=1;l<=e;l++)t*=l;return t}if(e>99){for(var u=BigInt(1),o=1;o<=e;o++)u*=BigInt(o);return Number(u)}},a=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(0===e.length)return[null];var u=e.reduce((function(e,t){return Array.isArray(e)&&Array.isArray(t)?e.filter((function(r){return t.includes(r)})):(console.log(n,r,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(l(u)))},i=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(0===e.length)return[null];var u=e.map((function(e){return Array.isArray(e)?e:(console.log(n,r,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(l(u)))},f=function(e){var t=function(r){var n=Object.create(null);return Object.assign(n,{val:r,left:null,right:null})},l=function(e,t){if(t.val<e.val)null===e.left?e.left=t:l(e.left,t);else{if(!(t.val>e.val))return void console.log(n,r,"you passed a duplicate value to binary search tree, Spurv ignored it");null===e.right?e.right=t:l(e.right,t)}},u=null;return Number.isNaN(Number(e))||(u=t(Number(e))),{insert:function(r){if(null===u)return u=t(r);var n=t(r);return l(u,n),u},getHead:function(){return u}}};export{f as bstree,e as compose,t as deserialize,o as factorial,l as flatten,a as intersect,u as serialize,i as union};
