"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var r="background: #6a4313;color: white;font-size:10px;font-family: monospace;border:1px solid #6a4313;border-radius: 5px",e="%c üê¶Error from Spurv: ",n=function(t,l){void 0===l&&(l={levels:Number.POSITIVE_INFINITY});var u=l.levels?Number(l.levels):0;return Array.isArray(t)?0===u?t:t.reduce((function(r,e){return Array.isArray(e)?r.concat(n(e,{levels:u-1})):r.concat(e)}),[]):(console.log(e,r,"flatten accepts an array","and safe answer '[]' returned"),[])};exports.bstree=function(n){var t=function(r){var e=Object.create(null);return Object.assign(e,{val:r,left:null,right:null})},l=function(n,t){if(t.val<n.val)null===n.left?n.left=t:l(n.left,t);else{if(!(t.val>n.val))return void console.log(e,r,"you passed a duplicate value to binary search tree, Spurv ignored it");null===n.right?n.right=t:l(n.right,t)}},u=null;return Number.isNaN(Number(n))||(u=t(Number(n))),{insert:function(r){if(null===u)return u=t(r);var e=t(r);return l(u,e),u},getHead:function(){return u}}},exports.compose=function(){for(var n=[],t=arguments.length;t--;)n[t]=arguments[t];return function(t){return n.reduce((function(n,t){"function"==typeof t&&1===t.length||console.log(e,r,"compose accepts pure function(s) which needs only 1 argument");try{return t(n)}catch(n){console.log(e,r,n)}}),t)}},exports.deserialize=function(n){if(null===n)return null;var t=function(r){var e=Object.create(null);return Object.assign(e,{val:r,left:null,right:null})},l=function(r){return"null"===r||void 0===r?null:t(Number(r))},u=[];try{var o=n.slice(1,-1).split(","),a=o.shift();if("null"===a)return null;var i=t(Number(a));for(u.push(i);u.length;)for(var s=u.length,c=0;c<s;c++){var f=u.shift();if(f){var v=l(o.shift()),p=l(o.shift());f.left=v,f.right=p,null!==v&&u.push(v),null!==p&&u.push(p)}}return i}catch(n){console.log(e,r,"make sure you provided a valid serialized string to function deserialize"),console.log(n)}},exports.factorial=function(n){if(isNaN(n)||n<0||n>170)return console.log(e,r,"number 'n'(0 <= n <= 170) expected","and safe answer '1' returned"),1;if(0===n)return 1;if(n<=99){for(var t=1,l=1;l<=n;l++)t*=l;return t}if(n>99){for(var u=BigInt(1),o=1;o<=n;o++)u*=BigInt(o);return Number(u)}},exports.flatten=n,exports.intersect=function(){for(var t=[],l=arguments.length;l--;)t[l]=arguments[l];if(0===t.length)return[null];var u=t.reduce((function(n,t){return Array.isArray(n)&&Array.isArray(t)?n.filter((function(r){return t.includes(r)})):(console.log(e,r,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(n(u)))},exports.serialize=function(n){if(null===n)return null;var t=[],l=[];l.push(n);try{for(;l.length;)for(var u=l.length,o=0;o<u;o++){var a=l.shift();null!==a?(t.push(a.val),l.push(a.left),l.push(a.right)):t.push("null")}for(;"null"===t[t.length-1];)t.pop();return"["+t.toString()+"]"}catch(n){console.log(e,r,"make sure you pass a binary tree to function serialize"),console.log(n)}},exports.union=function(){for(var t=[],l=arguments.length;l--;)t[l]=arguments[l];if(0===t.length)return[null];var u=t.map((function(n){return Array.isArray(n)?n:(console.log(e,r,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(n(u)))};
