var $purv=function(r){"use strict";var t=Symbol.for("relationtree_children_Symbol"),e="background: #6a4313;color: white;font-size:10px;font-family: monospace;border:1px solid #6a4313;border-radius: 5px",n="%c üê¶Error from Spurv: ",i=function(r,t){void 0===t&&(t={levels:Number.POSITIVE_INFINITY});var o=t.levels?Number(t.levels):0;return Array.isArray(r)?0===o?r:r.reduce((function(r,t){return Array.isArray(t)?r.concat(i(t,{levels:o-1})):r.concat(t)}),[]):(console.log(n,e,"flatten accepts an array","and safe answer '[]' returned"),[])},o=function(r,e){if(!(Array.isArray(r)&&e&&e.id&&e.parentId))throw new Error("relationtree must have two arguments: data:[] and options:{root,id,parentId}");var n=[];try{var i=r.filter((function(r,t){if(r[e.parentId]===e.root)return n.push(t),r[e.parentId]===e.root}));if(0===i.length)return;for(var u=0,a=n.length;u<a;u++)r.slice(u,1);return i.forEach((function(n){n[t]=o(r,{root:n[e.id],id:e.id,parentId:e.parentId})})),i}catch(r){throw new Error("relationtree must have two arguments: data:[] and options:{root,id,parentId}, they will be used to build the tree")}},u=function(r){if(this._items={},this._length=0,r){if("object"!=typeof r)throw new TypeError("Spurv: initial data must be an object");for(var t in r)this.add(t,r[t])}},a={length:{configurable:!0}};a.length.get=function(){return this._length},u.prototype._getKeyAsString=function(r){if(void 0===r)throw new TypeError("Spurv: key is undefined");return"object"==typeof r?JSON.stringify(r):r.toString()},u.prototype.add=function(r,t){var e=this._getKeyAsString(r);e in this._items||this._length++,this._items[e]=t},u.prototype.clear=function(){this._items={},this._length=0},u.prototype.containsKey=function(r){var t=this._getKeyAsString(r);return Object.keys(this._items).includes(t)},u.prototype.containsValue=function(r){var t=this._getKeyAsString(r);return Object.values(this._items).includes(t)},u.prototype.get=function(r){var t=this._getKeyAsString(r);return this._items[t]||void 0},u.prototype.remove=function(r){var t=this._getKeyAsString(r);t in this._items&&this._length--,delete this._items[t]},u.prototype.keys=function(){return Object.keys(this._items)},u.prototype.entries=function(){return Object.entries(this._items)},u.prototype.values=function(){return Object.values(this._items)},Object.defineProperties(u.prototype,a);return r.bstree=function(r){var t=function(r){var t=Object.create(null);return Object.assign(t,{val:r,left:null,right:null})},i=function(r,t){if(t.val<r.val)null===r.left?r.left=t:i(r.left,t);else{if(!(t.val>r.val))return void console.log(n,e,"you passed a duplicate value to binary search tree, Spurv ignored it");null===r.right?r.right=t:i(r.right,t)}},o=null;return Number.isNaN(Number(r))||(o=t(Number(r))),{insert:function(r){if(null===o)return o=t(r);var e=t(r);return i(o,e),o},getHead:function(){return o}}},r.compose=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];return function(t){return r.reduce((function(r,t){"function"==typeof t&&1===t.length||console.log(n,e,"compose accepts pure function(s) which needs only 1 argument");try{return t(r)}catch(r){console.log(n,e,r)}}),t)}},r.deserialize=function(r){if(null===r)return null;var t=function(r){var t=Object.create(null);return Object.assign(t,{val:r,left:null,right:null})},i=function(r){return"null"===r||void 0===r?null:t(Number(r))},o=[];try{var u=r.slice(1,-1).split(","),a=u.shift();if("null"===a)return null;var l=t(Number(a));for(o.push(l);o.length;)for(var s=o.length,c=0;c<s;c++){var f=o.shift();if(f){var h=i(u.shift()),d=i(u.shift());f.left=h,f.right=d,null!==h&&o.push(h),null!==d&&o.push(d)}}return l}catch(r){console.log(n,e,"make sure you provided a valid serialized string to function deserialize"),console.log(r)}},r.dictionary=function(r){return new u(r)},r.factorial=function(r){if(isNaN(r)||r<0||r>170)return console.log(n,e,"number 'n'(0 <= n <= 170) expected","and safe answer '1' returned"),1;if(0===r)return 1;if(r<=99){for(var t=1,i=1;i<=r;i++)t*=i;return t}if(r>99){for(var o=BigInt(1),u=1;u<=r;u++)o*=BigInt(u);return Number(o)}},r.flatten=i,r.intersect=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(0===r.length)return[null];var o=r.reduce((function(r,t){return Array.isArray(r)&&Array.isArray(t)?r.filter((function(r){return t.includes(r)})):(console.log(n,e,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(i(o)))},r.relationtree=o,r.rtchildren=t,r.serialize=function(r){if(null===r)return null;var t=[],i=[];i.push(r);try{for(;i.length;)for(var o=i.length,u=0;u<o;u++){var a=i.shift();null!==a?(t.push(a.val),i.push(a.left),i.push(a.right)):t.push("null")}for(;"null"===t[t.length-1];)t.pop();return"["+t.toString()+"]"}catch(r){console.log(n,e,"make sure you pass a binary tree to function serialize"),console.log(r)}},r.sortarrayby=function(r,t){void 0===t&&(t={tar:[],rev:!1}),t.tar||(t.tar=[]);if(!Array.isArray(r))throw new TypeError("make sure you passed an array");if(Array.isArray(t.tar))return 0===t.tar.length?r.sort((function(r,e,n){return void 0===n&&(n=t.rev),n?r<e?1:r>e?-1:0:r<e?-1:r>e?1:0})):r.sort((function(r,e,n){void 0===n&&(n=t.rev);var i=t.tar,o=function(r){return i.reduce((function(r,t){return r[t]}),r)},u=o(r),a=o(e);return n?u<a?1:u>a?-1:0:u<a?-1:u>a?1:0}))},r.union=function(){for(var r=[],t=arguments.length;t--;)r[t]=arguments[t];if(0===r.length)return[null];var o=r.map((function(r){return Array.isArray(r)?r:(console.log(n,e,"Array<number> expected","and safe answer '[]' returned"),[])}));return Array.from(new Set(i(o)))},r}({});
